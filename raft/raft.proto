syntax = "proto3";

// Define Raft service
service RaftService {
    rpc Register( RegisterRequest) returns ( RegisterResponse);
    rpc RequestVote( RequestVoteRequest) returns ( RequestVoteReply);
    rpc AppendEntry( AppendEntryRequest) returns ( AppendEntryReply);
    rpc ServeClient (ServeClientArgs) returns (ServeClientReply) {}
}

message RegisterRequest {
  string msg = 1;
  
}

message RegisterResponse {
  string result = 1;
  string port = 2;
}

// Request and Reply messages for RequestVote RPC
message RequestVoteRequest {
    int32 candidateTerm = 1;
    int32 candidate_id = 2;
    int32 last_log_index = 3;
    int32 last_log_term = 4;
}

message RequestVoteReply {
    int32 term = 1;
    bool vote_granted = 2;
    int32 node_id=3;
    int32 old_leader_lease_duration = 4; // Added for old leader's lease duration
    string node_address = 5;
}

message entries{
    int32 term =1;
    string msg=2;
}
// Request and Reply messages for AppendEntry RPC
message AppendEntryRequest {
    int32 leader_term = 1;
    int32 leader_id = 2;
    int32 prev_log_index = 3;
    int32 prev_log_term = 4;
    repeated entries entries = 5;
    int32 leader_commit = 6;
    string type = 7;
    int32 leaseDuration = 8; 
}

message AppendEntryReply {
    int32 term = 1;
    bool success = 2;
    string nodeId = 3;
    
}

// Request and Reply messages for client interactions
message ServeClientArgs {
    string request = 1;
}
  
message ServeClientReply {
    string data = 1;
    string leaderID = 2;
    bool success = 3;
}

